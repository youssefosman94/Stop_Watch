/*
 * 	file name :application.c
 *	description: Mini Project 1
 *	About: stop watch
 *  Created on: Feb 1, 2024
 *  Author: Youssef Osman
 */


/* include libraries */
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

/* Global Variables */
unsigned char sec_first_digit =0;
unsigned char sec_second_digit =0;
unsigned char min_first_digit =0;
unsigned char min_second_digit =0;
unsigned char hour_first_digit =0;
unsigned char hour_second_digit =0;


ISR(TIMER1_COMPA_vect)
{
	sec_first_digit++;
	if(sec_first_digit == 10)
	{
		sec_first_digit = 0;
		sec_second_digit++;
	}

	if(sec_second_digit == 6 && sec_first_digit ==0)
	{
		sec_second_digit = 0;
		min_first_digit++;
	}

	if(min_first_digit == 10)
	{
		min_second_digit++;
		min_first_digit = 0;
	}

	if(sec_second_digit == 6 && sec_first_digit ==0)
	{
		hour_first_digit++;
		min_second_digit = 0;
	}

	if(hour_first_digit == 10)
	{
		hour_first_digit =0;
		hour_second_digit++;
	}

}

ISR(INT0_vect)
{
	sec_first_digit = 0;
	sec_second_digit = 0;
	min_first_digit = 0;
	min_second_digit = 0;
	hour_first_digit = 0;
	hour_second_digit = 0;
}

ISR(INT1_vect)
{
	TCCR1B &= 0xf8; // No Clock for paused
}

ISR(INT2_vect)
{
	TCCR1B |= 0x05; // Enable Clock for Resumed
}

void Timer1_init(void)
{

	/*
	 * compare mode for compare unit A
	 * mode number 4
	 * prescaler = 128
	 * */
	TCCR1A |= (1<<FOC1A) ;
	TCCR1B |= (1<<WGM12) |(1<<CS10) |(1<<CS12);

	/* Enable Compare A Match Interrupt Enable */

	TIMSK |= (1<<OCIE1A);

	/* initial value */
	TCNT1 = 0;

	/* compare value */
 	OCR1A = 977;
}

void INT0_init(void)
{
	DDRD &=  ~(1<<PD2);   // define Pin 3 in port D as input pin
	PORTD |= (1<<PD2);	 // trigger internal pull up
	MCUCR &= ~(1<<ISC01); // interrupt with falling edge
	GICR  |=  (1<<INT0); 	 // Enable Interrupt Request
}

void INT1_init(void)
{
	DDRD &= ~(1<<PD3);                // define Pin 3 in port D as input pin
	MCUCR |= (1<<ISC11) | (1<<ISC10); // raising edge
	GICR |= (1<<INT1);                // Enable Interrupt Request
}

void INT2_init(void)
{
	DDRB   &= ~(1<<PB2);   // define pin 2 in port B as input pin
	PORTB  |= (1<<PB2);    // trigger internal pull up
	MCUCSR &= ~(1<<ISC2);  // falling edge
	GICR   |= (1<<INT2);   // Enable Interrupt request

}

void Enable_SevenSegment(void)
{
	PORTA = (PORTA & 0xC0) | (1<<0);
	PORTC = (PORTC & 0xf0) | (sec_first_digit & 0x0f);
	_delay_ms(2);

	PORTA = (PORTA & 0xC0) | (1<<1);
	PORTC = (PORTC & 0xf0) | (sec_second_digit & 0x0f);
	_delay_ms(2);

	PORTA = (PORTA & 0xC0) | (1<<2);
	PORTC = (PORTC & 0xf0) | (min_first_digit & 0x0f);
	_delay_ms(2);

	PORTA = (PORTA & 0xC0) | (1<<3);
	PORTC = (PORTC & 0xf0) | (min_second_digit & 0x0f);
	_delay_ms(2);

	PORTA = (PORTA & 0xC0) | (1<<4);
	PORTC = (PORTC & 0xf0) | (hour_first_digit & 0x0f);
	_delay_ms(2);

	PORTA = (PORTA & 0xC0) | (1<<5);
	PORTC = (PORTC & 0xf0) | (hour_second_digit & 0x0f);
	_delay_ms(2);
}


int main(void)
{
	/* Enable Global interrupts */
	SREG |= (1<<7);

	// define first six pins in port A as output & disabled PINS
	DDRA |= 0x3F;
	PORTA &= 0xC0;

	// define first four pins in port C as output , with initial value 0
	DDRC |= 0x0F;
	PORTC &= 0xF0;

	Timer1_init();	/* timer start */
	INT0_init();    /* Enable INT0 */
	INT1_init();    /* Enable INT1 */
	INT2_init();    /* Enable INT2 */
	while(1){
		Enable_SevenSegment();

	}




}


